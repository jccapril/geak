// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lottery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LotteryClient is the client API for Lottery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LotteryClient interface {
	GetLastestLottery(ctx context.Context, in *GetLastestLotteryRequest, opts ...grpc.CallOption) (*GetLastestLotteryResponse, error)
}

type lotteryClient struct {
	cc grpc.ClientConnInterface
}

func NewLotteryClient(cc grpc.ClientConnInterface) LotteryClient {
	return &lotteryClient{cc}
}

func (c *lotteryClient) GetLastestLottery(ctx context.Context, in *GetLastestLotteryRequest, opts ...grpc.CallOption) (*GetLastestLotteryResponse, error) {
	out := new(GetLastestLotteryResponse)
	err := c.cc.Invoke(ctx, "/jeak.gateway.Lottery/GetLastestLottery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LotteryServer is the server API for Lottery service.
// All implementations must embed UnimplementedLotteryServer
// for forward compatibility
type LotteryServer interface {
	GetLastestLottery(context.Context, *GetLastestLotteryRequest) (*GetLastestLotteryResponse, error)
	mustEmbedUnimplementedLotteryServer()
}

// UnimplementedLotteryServer must be embedded to have forward compatible implementations.
type UnimplementedLotteryServer struct {
}

func (UnimplementedLotteryServer) GetLastestLottery(context.Context, *GetLastestLotteryRequest) (*GetLastestLotteryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastestLottery not implemented")
}
func (UnimplementedLotteryServer) mustEmbedUnimplementedLotteryServer() {}

// UnsafeLotteryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LotteryServer will
// result in compilation errors.
type UnsafeLotteryServer interface {
	mustEmbedUnimplementedLotteryServer()
}

func RegisterLotteryServer(s grpc.ServiceRegistrar, srv LotteryServer) {
	s.RegisterService(&Lottery_ServiceDesc, srv)
}

func _Lottery_GetLastestLottery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastestLotteryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotteryServer).GetLastestLottery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jeak.gateway.Lottery/GetLastestLottery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotteryServer).GetLastestLottery(ctx, req.(*GetLastestLotteryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lottery_ServiceDesc is the grpc.ServiceDesc for Lottery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lottery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jeak.gateway.Lottery",
	HandlerType: (*LotteryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastestLottery",
			Handler:    _Lottery_GetLastestLottery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lottery.proto",
}
